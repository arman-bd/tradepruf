[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "tradepruf"
dynamic = ["version"]
description = "A flexible framework for backtesting trading strategies"
readme = "README.md"
requires-python = ">=3.10"
license = { file = "LICENSE" }
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
]
dependencies = [
    "yfinance>=0.2.35",
    "pandas>=2.2.0",
    "numpy>=1.26.3",
    "click>=8.1.7",
    "rich>=13.7.0",
    "plotly>=5.18.0",
    "matplotlib>=3.8.2",
    "seaborn>=0.13.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.5",
    "black>=24.1.0",
    "ruff>=0.2.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "yfinance>=0.2.35",
    "rich>=13.7.0",
]
viz = [
    "plotly>=5.18.0",
    "matplotlib>=3.8.2",
    "kaleido>=0.2.1",
    "seaborn>=0.13.0"
]

[project.urls]
Homepage = "https://github.com/yourusername/tradepruf"
Documentation = "https://tradepruf.readthedocs.io/"
Repository = "https://github.com/yourusername/tradepruf.git"
"Bug Tracker" = "https://github.com/yourusername/tradepruf/issues"

[project.scripts]
tradepruf = "src.cli.commands:cli"

[tool.hatch.version]
path = "src/__init__.py"
pattern = '__version__ = "(?P<version>[^"]+)"'

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "pytest-cov",
]

[tool.hatch.envs.lint]
dependencies = [
    "black>=24.1.0",
    "ruff>=0.2.0",
    "mypy>=1.8.0",
]

[[tool.hatch.envs.test.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=src --cov-report=term-missing"
testpaths = [
    "tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
^/tests/
'''

[tool.ruff]
target-version = "py310"
line-length = 88
fix = true
output-format = "grouped"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "D",   # pydocstyle
    "T20", # flake8-print
    "PT",  # pytest
    "RET", # flake8-return
]
ignore = [
    "E501",  # line length handled by black
    "D100",  # missing docstring in public module
    "D104",  # missing docstring in public package
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "PT"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["backtest", "core", "data", "strategies", "utils", "cli"]

[tool.mypy]
python_version = "3.10"
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = ["yfinance.*", "pandas.*", "numpy.*"]
ignore_missing_imports = true

[tool.coverage.run]
branch = true
source = ["src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "\\.\\.\\.",
]
show_missing = true
